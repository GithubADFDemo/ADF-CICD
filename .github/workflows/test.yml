on:
  push:
    # branches:
    # - 'feature/*'
    tags:
      - '*'
  workflow_dispatch:
    inputs:
      releaseBranchName:
        description: 'Feature Branch Name'
        required: true
      lastSuccessfullreleaseBranchName:
        description: 'Last Successfull Release Branch Name'
        required: true

permissions:
      id-token: write
      contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Create Pull Request
      id: create_pr
      uses: peter-evans/create-pull-request@v3
      with:
          token: ${{ secrets.ACCESS_TOKEN }}
          branch: ${{ github.event.inputs.lastSuccessfullreleaseBranchName }}
          title: Automatic PR from GitHub Actions
          body: This PR was automatically generated by a GitHub Actions workflow.
          base: ${{ github.event.inputs.releaseBranchName }} # Change 'main' to your target branch

    - name: Merge Pull Request
      uses: pullreminders/merge-action@v1
      with:
          github_token: ${{ secrets.ACCESS_TOKEN }}
          method: 'squash' # or 'merge' or 'rebase'
          pull_number: ${{ steps.create_pr.outputs.pull_number }}
          
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.event.inputs.releaseBranchName }}
        # ref: 'feature/divyang01'
        # ref: 'ADF_Development'
          
# # Installs Node and the npm packages saved in your package.json file in the build
#     - name: Setup Node.js environment
#       uses: actions/setup-node@v3.4.1
#       with:
#         node-version: 14.x
        
#     - name: install ADF Utilities package
#       run: npm install
#       working-directory: ${{github.workspace}}/ADFRoot/build  # (1) provide the folder location of the package.json file
        
# # Validates all of the Data Factory resources in the repository. You'll get the same validation errors as when "Validate All" is selected.
#     - name: Validate
#       run: npm run build validate ${{github.workspace}}/ADFRoot/ /subscriptions/7c3e5137-64ea-47cb-8280-0d4fa6c30bc7/resourceGroups/dev-rg/providers/Microsoft.DataFactory/factories/dev-adf-cicd-v2 # (2) The validate command needs the root folder location of your repository where all the objects are stored. And the 2nd parameter is the resourceID of the ADF instance 
#       working-directory: ${{github.workspace}}/ADFRoot/build
 

#     - name: Validate and Generate ARM template
#       run: npm run build export ${{github.workspace}}/ADFRoot/ /subscriptions/7c3e5137-64ea-47cb-8280-0d4fa6c30bc7/resourceGroups/dev-rg/providers/Microsoft.DataFactory/factories/dev-adf-cicd-v2 "ExportedArmTemplate"  # (3) The build command, as validate, needs the root folder location of your repository where all the objects are stored. And the 2nd parameter is the resourceID of the ADF instance. The 3rd parameter is the exported ARM template artifact name 
#       working-directory: ${{github.workspace}}/ADFRoot/build
 
# # In order to leverage the artifact in another job, we need to upload it with the upload action 
#     - name: upload artifact
#       uses: actions/upload-artifact@v3
#       with:
#         name: ExportedArmTemplate # (4) use the same artifact name you used in the previous export step
#         path: ${{github.workspace}}/ADFRoot/build/ExportedArmTemplate

#   release:
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
    
#  # we 1st download the previously uploaded artifact so we can leverage it later in the release job     
#       - name: Download a Build Artifact
#         uses: actions/download-artifact@v3.0.2
#         with:
#           name: ExportedArmTemplate # (5) Artifact name 

#       - name: Login via Az module
#         uses: azure/login@v1
#         with:
#           creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
#           enable-AzPSSession: true 
          
#       - name: data-factory-deploy
#         uses: Azure/data-factory-deploy-action@v1.2.0
#         with:
#           resourceGroupName: 'dev-rg' # (6) your target ADF resource group name
#           dataFactoryName: 'qa-adf-cicd-v2'# (7) your target ADF name
#           armTemplateFile: 'ARMTemplateForFactory.json' # (8) ARM template file name ARMTemplateForFactory.json
#           armTemplateParametersFile: 'https://raw.githubusercontent.com/GithubADFDemo/ADF-CICD/adf_publish/qa-adf-cicd-v2/ARMTemplateParametersForQAFactory.json' # (9) ARM template parameters file name ARMTemplateParametersForFactory.json
#           # additionalParameters: #
